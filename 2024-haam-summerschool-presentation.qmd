---
title: "Introduction to Population Genetics"
subtitle: "2024 HAAM Summerschool Presentation"
author: Stephan Schiffels
format:
    revealjs:
        smaller: true
        scrollable: true
---

# Outline

- Human genetic variation
- Genetic Drift
- FSt and friends
- Visualising population structure through PCA
- Investigating Admixture with F-statistics
- Model-based clustering

# Human Genetic variation

## Demo:[https://popgen.uchicago.edu/ggv](https://popgen.uchicago.edu/ggv)

## Variation in space (Example 1)

![](images/ggv-ex-1.jpg)


## Variation in space (Example 2)

![](images/ggv-ex-2.jpg)


## Variation in space (Example 3)

![](images/ggv-ex-3.jpg)

# Genetic Drift

- Random process of allele frequency change.
- Wright-Fisher model:
  - Parent generation of $N$ individuals
  - Exactly $N$ individuals as next generation.
  - Parents drawn randomly per child
  - results in binomial random draws.

## Example
- $N=100$ (haploid individuals)
- two alleles $A$ and $B$
- Generation 1: 50 / 50, so allele freuqency of $B$ is 50%.
- Generation 2: 47 / 53, so allele freuqency of $B$ is 53%.

## Simulation
Implementation in R:

```{R echo=TRUE, `code-line-numbers` = "|1|2|3|4-6|"} 
wfsim <- function(n, g, x0) {
  res <- numeric(g + 1)
  res[1] <- x0
  for (i in 2:(g + 1)) {
    res[i] <- (rbinom(1, n, res[i - 1])) / n
  }
  return(res)
}
```

We can test it:

```{R echo=TRUE}
set.seed(1)
wfsim(100, 10, 0.5)
```

--- 

```{R echo=TRUE}
time_series <- wfsim(100, 100, 0.5)
plot(time_series, type = "l", ylim = c(0, 1),
     xlab = "generation", ylab = "allele frequency")
```

## Population size dependency

::: {.panel-tabset}

### N = 100
```{R}
gens <- 100
sims100 <- replicate(50, wfsim(100, gens, 0.5))
matplot(sims100, type = "l", lty = 1, col = "black",
        ylim = c(0, 1),
        xlab = "generation", ylab = "allele frequency")
```

### N = 1000
```{R}
gens <- 100
sims1000 <- replicate(50, wfsim(1000, gens, 0.5))
matplot(sims1000, type = "l", lty = 1, col = "black",
        ylim = c(0, 1),
        xlab = "generation", ylab = "allele frequency")
```

### N = 10000
```{R}
gens <- 100
sims10000 <- replicate(50, wfsim(10000, gens, 0.5))
matplot(sims10000, type = "l", lty = 1, col = "black",
        ylim = c(0, 1),
        xlab = "generation", ylab = "allele frequency")
```

::: 

## Population size dependency

::: {.panel-tabset}

### N = 100
```{R}
par(mfrow = c(1, 2))
matplot(sims100, type = "l", lty = 1, col = "black",
        ylim = c(0, 1),
        xlab = "generation", ylab = "allele frequency")
plot(apply(sims100,   1, var), type = "l", ylim = c(0, 0.15),
     xlab = "generations", ylab = "Variance")
```

### N = 1000
```{R}
par(mfrow = c(1, 2))
matplot(sims1000, type = "l", lty = 1, col = "black",
        ylim = c(0, 1),
        xlab = "generation", ylab = "allele frequency")
plot(apply(sims1000,  1, var), type = "l", ylim = c(0, 0.15),
     xlab = "generations", ylab = "Variance")
```

### N = 10000
```{R}
par(mfrow = c(1, 2))
matplot(sims10000, type = "l", lty = 1, col = "black",
        ylim = c(0, 1),
        xlab = "generation", ylab = "allele frequency")
plot(apply(sims10000, 1, var), type = "l", ylim = c(0, 0.15),
     xlab = "generations", ylab = "Variance")
```

::: 

## Fixation

```{R}
gens <- 1000
sim_long <- replicate(100, wfsim(100, gens, 0.5))

par(mfrow = c(1, 2))
matplot(sim_long[,1:20], type = "l", lty = 1, col = "black",
        ylim = c(0, 1),
        xlab = "generation", ylab = "allele frequency")
plot(apply(sim_long, 1, var), type = "l", xlab = "generations", ylab = "Variance")
```

# The fixation index $F_\text{ST}$ 

## Formal definition of $F_\text{ST}$

Conditional probability of allele frequency $p_i$ in population $i$, given an ancestral allele frequency $p_\text{anc}$:

$$E(p_i|p_\text{anc}) = p_\text{anc}$$

and variance $$Var(p_i|p_\text{anc}) = F_\text{ST}^i p_\text{anc}(1-p_\text{anc}).$$

---

Intuition for $Var(p_i|p_\text{anc}) = F_\text{ST}^i p_\text{anc}(1-p_\text{anc}):$

- For $F_\text{ST}^i=0$: $p_i = p_\text{anc}$, no variance
- For $F_\text{ST}^i=1$: Variance is $p_\text{anc}(1-p_\text{anc})$

```{R}
gens <- 1000
sims_x05 <- replicate(1000, wfsim(100, gens, 0.5))
sims_x03 <- replicate(1000, wfsim(100, gens, 0.3))
sims_x02 <- replicate(1000, wfsim(100, gens, 0.2))

plot_dat <- cbind(
  apply(sims_x05, 1, var),
  apply(sims_x03, 1, var),
  apply(sims_x02, 1, var)
)

par(mfrow = c(1, 1))

cols <- c("blue", "red", "green")
matplot(plot_dat, type = "l", ylim = c(0, 0.25), lty = 1,
             xlab = "generations", ylab = "Variance", col = cols)
legend(x = "bottomright",
       legend = c("p_anc = 0.5", "p_anc = 0.3", "p_anc = 0.2", "FST = 1"),
       lty = c(1, 1, 1, 2), col = c(cols, "black"))

theory_values <- sapply(c(0.5, 0.3, 0.2), function(x) x * (1 - x))
abline(h = theory_values, lty = 2, col = cols)
```


## Estimating $F_\text{ST}$ from genomic data {.smaller}

From Theory: 
$$F_\text{ST}(A,B) = \frac{F_\text{ST}^A+F_\text{ST}^B}{2}$$

Hudson-Estimator:
$$F_\text{ST}=1-\frac{H_w}{H_b}$$

- $H_w$ is heterozygosity within each population
- $H_b$ is heterozygosity between two populations

Intuition for $F_\text{ST}=1-\frac{H_w}{H_b}$:

- $F_\text{ST}=0$ if and only if $H_w=H_b$, (A and B are same population)
- $F_\text{ST}=1$ if and only if $H_w=0$, all variants fully fixed in both populations.


## Estimation from allele frequencies {.smaller}

$$F_\text{ST}(A,B)=\frac{\left\langle(a-b)^2\right\rangle}{\left\langle a(1-b)+b(1-a)\right\rangle}$$

- $a$ and $b$ are _population allele frequencies_ (in principle unobserved), but can be approximated by _sample allele frequencies_.
- Bias-corrected version:

$$F'_\text{ST}(A,B) = \frac{\left\langle\left(a-b\right)^2-\frac{a(1-a)}{n_a-1} - \frac{b(1-a}{n_b-1}\right\rangle}{\left\langle a(1-b) + b(1-a)\right\rangle}$$

## Relation to $F_2$ Statistics {.smaller}

$F_\text{ST}(A,B)$ is closely related to F2-statistics, introduced in [@Patterson2012]:

$$F_2(A,B)=(a-b)^2$$

- Both statistics range technically from 0 to 1, but differently scaled!
- $F_2:$
  - Theoretical value of $F_2=1$: Both populations are fixed at different alleles in all studied SNPs (impossible).
  - Timescale for $F_2=1$: Mutation-time-scale $1/\mu$ (hundreds of millions of generations)
- $F_\text{ST}$:
  - Theoretical value of $F_\text{ST}=1$: Both populations are fixed at all alleles, but not necessarily at different ones.
  - Timescale for $F_\text{ST}=1$: Drift time-scale $1/N$ (tens of thousands of generations)

## Computing FST using xerxes {.smaller}

Poseidon Software xerxes [](https://www.poseidon-adna.org)

We here chose a number of populations from [@Patterson2012] with more than 10 samples per population, and prepare the following config file for xerxes:

```Yaml
fstats:
- type: FST
  a: ["Adygei", "Balochi", "Basque", "BedouinA", "BedouinB", "Biaka", "Brahui", "Burusho", "Druze", "French", "Han", "Hazara", "Italian_North", "Japanese", "Kalash", "Karitiana", "Makrani", "Mandenka", "Mayan", "Mozabite", "Orcadian", "Palestinian", "Papuan", "Pathan", "Pima", "Russian", "Sardinian", "Sindhi_Pakistan", "Yakut", "Yoruba"]
  b: ["Adygei", "Balochi", "Basque", "BedouinA", "BedouinB", "Biaka", "Brahui", "Burusho", "Druze", "French", "Han", "Hazara", "Italian_North", "Japanese", "Kalash", "Karitiana", "Makrani", "Mandenka", "Mayan", "Mozabite", "Orcadian", "Palestinian", "Papuan", "Pathan", "Pima", "Russian", "Sardinian", "Sindhi_Pakistan", "Yakut", "Yoruba"]
- type: F2
  a: ["Adygei", "Balochi", "Basque", "BedouinA", "BedouinB", "Biaka", "Brahui", "Burusho", "Druze", "French", "Han", "Hazara", "Italian_North", "Japanese", "Kalash", "Karitiana", "Makrani", "Mandenka", "Mayan", "Mozabite", "Orcadian", "Palestinian", "Papuan", "Pathan", "Pima", "Russian", "Sardinian", "Sindhi_Pakistan", "Yakut", "Yoruba"]
  b: ["Adygei", "Balochi", "Basque", "BedouinA", "BedouinB", "Biaka", "Brahui", "Burusho", "Druze", "French", "Han", "Hazara", "Italian_North", "Japanese", "Kalash", "Karitiana", "Makrani", "Mandenka", "Mayan", "Mozabite", "Orcadian", "Palestinian", "Papuan", "Pathan", "Pima", "Russian", "Sardinian", "Sindhi_Pakistan", "Yakut", "Yoruba"]
```

This will then produce all combinations of $FST(A, B)$ and $F_2(A, B)$ as indicated in the population lists.

We run this config file using the command line

```bash
REPO=/path/to/community-archive/2012_PattersonGenetics

xerxes fstats -d $REPO --statConfig fstat_world_config.yaml -f fstat_world_output.tsv > fstat_world_table.txt
```

## Xerxes output {.smaller}

- The standard output, is a nicely layouted ASCII Table, which looks like this (skipping thousands of lines)
- The `-f` flag outputs a tab-separated file, here named `fstat_world_output.tsv`, which is easier to read into R.

```text
.-----------.-----------------.-----------------.---.---.---------.----------------.--------------------.------------------.--------------------.
| Statistic |        a        |        b        | c | d | NrSites | Estimate_Total | Estimate_Jackknife | StdErr_Jackknife | Z_score_Jackknife  |
:===========:=================:=================:===:===:=========:================:====================:==================:====================:
| FST       | Adygei          | Adygei          |   |   | 593124  | 0.0000         | 0.0000             | 0.0000           | NaN                |
| FST       | Adygei          | Balochi         |   |   | 593124  | 1.2789e-2      | 1.2789e-2          | 3.3572e-4        | 38.09517110646904  |
| FST       | Adygei          | Basque          |   |   | 593124  | 1.8790e-2      | 1.8790e-2          | 4.0141e-4        | 46.810358341103225 |
| FST       | Adygei          | BedouinA        |   |   | 593124  | 1.3017e-2      | 1.3017e-2          | 2.9647e-4        | 43.90737238689979  |
| FST       | Adygei          | BedouinB        |   |   | 593124  | 3.3455e-2      | 3.3454e-2          | 5.7648e-4        | 58.03217592610529  |
| FST       | Adygei          | Biaka           |   |   | 593124  | 0.1716         | 0.1716             | 1.2185e-3        | 140.85275693678508 |
| FST       | Adygei          | Brahui          |   |   | 593124  | 1.4644e-2      | 1.4644e-2          | 3.4481e-4        | 42.46989237781921  |
| FST       | Adygei          | Burusho         |   |   | 593124  | 1.8566e-2      | 1.8566e-2          | 3.8156e-4        | 48.6573908240317   |
| FST       | Adygei          | Druze           |   |   | 593124  | 1.2173e-2      | 1.2173e-2          | 2.6659e-4        | 45.65975464203526  |
| FST       | Adygei          | French          |   |   | 593124  | 9.7730e-3      | 9.7730e-3          | 3.1627e-4        | 30.9006924987833   |
| FST       | Adygei          | Han             |   |   | 593124  | 9.8759e-2      | 9.8759e-2          | 1.1973e-3        | 82.48660429503893  |
| FST       | Adygei          | Hazara          |   |   | 593124  | 3.0725e-2      | 3.0726e-2          | 7.1478e-4        | 42.98629834431124  |
| FST       | Adygei          | Italian_North   |   |   | 593124  | 8.6600e-3      | 8.6601e-3          | 2.7883e-4        | 31.058813893781032 |
...
| F2        | Yoruba          | Kalash          |   |   | 593124  | 4.5530e-2      | 4.5530e-2          | 3.1580e-4        | 144.17623831657042 |
| F2        | Yoruba          | Karitiana       |   |   | 593124  | 8.0274e-2      | 8.0274e-2          | 5.0430e-4        | 159.18045338908084 |
| F2        | Yoruba          | Makrani         |   |   | 593124  | 3.7091e-2      | 3.7091e-2          | 2.9054e-4        | 127.66205740966917 |
| F2        | Yoruba          | Mandenka        |   |   | 593124  | 2.2053e-3      | 2.2053e-3          | 5.0215e-5        | 43.91726459507651  |
| F2        | Yoruba          | Mayan           |   |   | 593124  | 5.9758e-2      | 5.9758e-2          | 4.8204e-4        | 123.968969339996   |
| F2        | Yoruba          | Mozabite        |   |   | 593124  | 2.8717e-2      | 2.8717e-2          | 2.9425e-4        | 97.59603068441464  |
| F2        | Yoruba          | Orcadian        |   |   | 593124  | 4.3925e-2      | 4.3925e-2          | 3.0915e-4        | 142.08521834047312 |
| F2        | Yoruba          | Palestinian     |   |   | 593124  | 3.5635e-2      | 3.5635e-2          | 2.6730e-4        | 133.31454891682029 |
| F2        | Yoruba          | Papuan          |   |   | 593124  | 6.8316e-2      | 6.8316e-2          | 6.1762e-4        | 110.6122879514611  |
| F2        | Yoruba          | Pathan          |   |   | 593124  | 3.8770e-2      | 3.8770e-2          | 2.9069e-4        | 133.3741386458573  |
| F2        | Yoruba          | Pima            |   |   | 593124  | 6.9994e-2      | 6.9994e-2          | 5.4248e-4        | 129.02469385208832 |
| F2        | Yoruba          | Russian         |   |   | 593124  | 4.2705e-2      | 4.2705e-2          | 3.1362e-4        | 136.16918827517011 |
| F2        | Yoruba          | Sardinian       |   |   | 593124  | 4.4227e-2      | 4.4227e-2          | 3.1663e-4        | 139.68078608155477 |
| F2        | Yoruba          | Sindhi_Pakistan |   |   | 593124  | 3.8543e-2      | 3.8543e-2          | 2.8137e-4        | 136.9825670475205  |
| F2        | Yoruba          | Yakut           |   |   | 593124  | 5.0727e-2      | 5.0727e-2          | 3.9113e-4        | 129.69267912526192 |
| F2        | Yoruba          | Yoruba          |   |   | 593124  | 0.0000         | 0.0000             | 0.0000           | NaN                |
'-----------'-----------------'-----------------'---'---'---------'----------------'--------------------'------------------'--------------------'
```

## Plotting results in R {.smaller}

We first load the data

```{r echo=TRUE}
dat <- subset(read.table("fst_working/fstat_world_output.tsv", sep="\t", header = TRUE),
                     select=-c(c, d, Z_score_Jackknife))
datFST <- dat[dat$Statistic == "FST",]
datF2 <- dat[dat$Statistic == "F2",]
head(datFST[,1:6])
```

Let's check out the largest values

```{r echo=TRUE}
head(dat[order(-dat$Estimate_Total),1:6])
```

## Histograms {.smaller}

::: {.panel-tabset}

### FST

```{r echo = TRUE}
avg <- mean(datFST$Estimate_Total)
hist(datFST$Estimate_Total, xlab = "FST", ylab = "Nr of pairs",  main = paste0("mean=", round(avg, 2)))
```


### F2

```{r echo = TRUE}
avg <- mean(datF2$Estimate_Total)
hist(datF2$Estimate_Total, xlab = "F2", ylab = "Nr of pairs", main = paste0("mean=", round(avg, 2)))
```

:::

## Heatmaps

```{r}
fstMat <- xtabs(Estimate_Total ~ a + b, datFST)
f2Mat <- xtabs(Estimate_Total ~ a + b, datF2)
```

::: {.panel-tabset}

### FST

```{r}
#| fig-height: 7
#| fig-width: 7
heatmap(fstMat, symm = TRUE, hclustfun = function(m) hclust(m, method="ward.D2"))
```

### F2

```{r}
#| fig-height: 7
#| fig-width: 7
heatmap(f2Mat, symm = TRUE, hclustfun = function(m) hclust(m, method="ward.D2"))
```

:::

## Dendrograms

::: {.panel-tabset}

### FST
```{r}
fstDist <- as.dist(fstMat)
dendro <- hclust(fstDist, method="ward.D2")
plot(dendro, hang = -1, ylab = "FST", xlab = "", main = "")
```

### F2
```{r}
f2Dist <- as.dist(f2Mat)
dendro <- hclust(f2Dist, method="ward.D2")
plot(dendro, hang = -1, ylab = "FST", xlab = "", main = "")
```

::: 

- FST affected by total drift (inversely proportional to population size)
- F2 more closely reflecting evolutionary time


# Visualising population structure through PCA

## Principal Components Analyses

Genotype matrix

```text
Test Indivdual 1 (Selected SNPs)  :  T   G   A   C   C   G   G   . . .
Test Indivdual 2 (Selected SNPs)  :  T   A   A   C   C   G   G   . . .
Test Indivdual 3 (Selected SNPs)  :  C   A   A   C   C   G   G   . . .
Test Indivdual 4 (Selected SNPs)  :  T   A   A   C   C   G   G   . . .
Test Indivdual 5 (Selected SNPs)  :  C   G   G   C   C   G   G   . . .
Test Indivdual 6 (Selected SNPs)  :  C   G   G   C   C   G   G   . . .
               .                     .   .   .   .   .   .   .   .
               .                     .   .   .   .   .   .   .     .  
               .                     .   .   .   .   .   .   .       .
```

How can we visualise hundreds of individuals with a million SNPs?

## Principal Components Analyses

- Basic problem in multivariate statistics
- highdimensional data → two-dimensional visualisation, dimension reduction
- Idea: Order entities in a two-dimensional room such that the distance between them reflects the true high-dimensional distances most accurately
- Distances can be computed straight-forward, even for many dimensions

## PCA Example: Flags

![](images/flags.jpg)

## PCA Example: EU Flags

![](images/flags_eu.jpg)

## PCA Example: Greek Letters

![](images/greekLetters.jpg)

## PCA Example: Van Gogh Paintings

![](images/vanGoghPaintings.jpg)
